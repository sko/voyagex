<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

class window.VoyageX.Main
  
  @_SINGLETON = null
  @_STORAGE_CONTROLLER = null
  @_MAP_CONTROL = null
  @_MARKER_MANAGER = null
  @_COMM_CHANNELS = ['system', 'talk', 'map_events', 'uploads']
  @_STORAGE_MODEL = null

  constructor: (userId, cacheStrategy, view, mapOptions, offlineZooms, online) ->
    Main._SINGLETON = this
    window.APP = this
    @_initState = 0
    @_view = view
    @_comm = null
    @_selectedPositionLatLng = [-1, -1]
    @_STORAGE_MODEL = new Storage.Model()
    $(window.document).ready () ->
        APP._init userId, cacheStrategy, view, mapOptions, offlineZooms, online

  _init: (userId, cacheStrategy, view, mapOptions, offlineZooms, online) ->
    APP._initState += 1
    switch APP._initState
      when 1
        Main._STORAGE_CONTROLLER = new Comm.StorageController((initError) ->
            console.log 'StorageController initialized FileSystem with message: '+(if initError then 'FAILED' else 'OK')
            APP._init userId, cacheStrategy, view, mapOptions, offlineZooms, online
          )
      when 2
        APP._comm = new Comm.Comm(userId,
                                  [['/talk', view._talkCB, window.VoyageX.CHANNEL_ENC_KEY],
                                   ['/map_events', view._mapEventsCB, window.VoyageX.CHANNEL_ENC_KEY],
                                   ['/uploads', view._uploadsCB, window.VoyageX.CHANNEL_ENC_KEY]],
                                   window.VoyageX.SYS_CHANNEL_ENC_KEY,
                                   APP._systemCB)
        Main._MAP_CONTROL = new VoyageX.MapControl cacheStrategy, mapOptions, offlineZooms, online
        Main._MARKER_MANAGER = new VoyageX.MarkerManager(Main.map())
#      if navigator.geolocation 
#        navigator.geolocation.getCurrentPosition(initPositionCB, (error) ->
#            alert('geolocation timed out - manual selection required.\nsetting default location...')
#            initPositionCB { coords: { latitude: defaultLatLng[0], longitude: defaultLatLng[1] } }
#        , { enableHighAccuracy: true, timeout : 10000 })
#      #Main.map().on('locationfound', (e) ->
#      #    alert('found location...')
#      #  )
#      #Main.map().on('locationerror', (e) ->
#      #    alert('geolocation timed out - manual selection required.\nsetting default location...')
#      #  )
        Main.map().on 'click', (event) ->
          address = null
          APP._setSelectedPositionLatLng Main.markerManager().get()||Main.markerManager().add(event.latlng.lat, event.latlng.lng, Main._markerEventsCB), event.latlng.lat, event.latlng.lng, address
          APP.publishPosition()
        Main.map().on('zoomend', (e) ->
            APP._zoomEnd(e);
          )
        if window.isMobile()
          Main.map().invalidateSize({
              reset: true,
              pan: false,
              animate: false
            })
        APP._initPositionCB { coords: { latitude: defaultLatLng[0], longitude: defaultLatLng[1] } }
        $('#zoom_level').html('<span style="color:white;">zoom: '+Main.map().getZoom()+'</span>')
        # next statement removes value from inputs!!
        $("#network_state").buttonset()
        $('button[value=camera]').focus()
        APP._zoomEnd(null)
        cacheStats()

  publishPosition: () ->
    @_comm.send('/map_events', {type: 'click',\
                                userId: $('#current_user_id').val(),\
                                lat: @_selectedPositionLatLng[0],\
                                lng: @_selectedPositionLatLng[1]})

  publishMessage: (publishText) ->
    @_comm.send('/talk', {type: 'message',\
                          userId: $('#current_user_id').val(),\
                          text: $('#current_user_id').val()+': '+publishText})

  getSelectedPositionLatLng: () ->
    return [@_selectedPositionLatLng[0], @_selectedPositionLatLng[1]]

  _setSelectedPositionLatLng: (marker, lat, lng, address) ->
    if marker == null
      marker = VoyageX.Main.markerManager().add lat, lng, Main._markerEventsCB
    else
      marker = VoyageX.Main.markerManager().sel marker, lat, lng, Main._markerEventsCB
    @_selectedPositionLatLng[0] = lat
    @_selectedPositionLatLng[1] = lng
    if address != null
      $('#cur_loc_addr').html(address) 
    if showSearchRadius
      VoyageX.Main.markerManager().searchBounds(VoyageX.SEARCH_RADIUS_METERS, Main.map())

  _zoomEnd: (e) ->
    $('#zoom_level').html('<span style="color:white;">zoom: '+Main.map().getZoom()+'</span>')

  _initPositionCB: (position) ->
    address = null
    marker = VoyageX.Main.markerManager().sel null, position.coords.latitude, position.coords.longitude, Main._markerEventsCB
    APP._setSelectedPositionLatLng marker, position.coords.latitude, position.coords.longitude, address
    Main.map().panTo([position.coords.latitude, position.coords.longitude])
    #Main.map().setView [position.coords.latitude, position.coords.longitude], 16
    APP.publishPosition()

  _systemCB: (message) ->
    console.log 'got a system - message: ' + message.type
    if message.type == 'ready_notification'
      # subscribe to all channels stored in window.subscribeTo-buffer
      while (channelPath = window.subscribeTo.pop())
        i = channelPath.indexOf(VoyageX.PEER_CHANNEL_PREFIX)
        channel = (if i == -1 then channelPath else channelPath.substr(0, i)).substr(1)
        Comm.Comm.subscribeTo channelPath, Comm.Comm.channelCallBacksJSON[channel].callback # eval(channel+'CB')
    else if message.type == 'subscription_grant_request'
    else if message.type == 'subscription_granted'
      for channel in VoyageX.Main.commChannels()
        if channel == 'system'
          continue
        channelPath = '/'+channel
        unless window.VoyageX.USE_GLOBAL_SUBSCRIBE
          channelPath += VoyageX.PEER_CHANNEL_PREFIX+message.peer.channel_enc_key
        Comm.Comm.subscribeTo channelPath, Comm.Comm.channelCallBacksJSON[channel].callback # eval(channel+'CB')
    else if message.type == 'subscription_denied'
    else if message.type == 'subscription_grant_revoked'
      for channel in VoyageX.Main.commChannels()
        if channel == 'system'
          continue
        channelPath = '/'+channel
        unless window.VoyageX.USE_GLOBAL_SUBSCRIBE
          channelPath += VoyageX.PEER_CHANNEL_PREFIX+message.peer.channel_enc_key
        Comm.Comm.unsubscribeFrom channelPath
    else if message.type == 'quit_subscription'
      true # do nothing
    APP._view._systemCB message

  panPosition: (lat, lng, address) ->
    APP._setSelectedPositionLatLng VoyageX.Main.markerManager().get(), lat, lng, address
    Main.map().panTo([lat, lng])
    #Main.map().setView([lat, lng], 16)
    VoyageX.NavBar.menuNavClick('map')

  photoNav: () ->
    $.ajax
      type: 'GET'
      dataType: 'script'
      url: '<%= photo_nav_path(lat: ':lat', lng: ':lng') %>'
           .replace(/:lat/, @_selectedPositionLatLng[0])
           .replace(/:lng/, @_selectedPositionLatLng[1])

  @_markerEventsCB: (event) ->
    address = null
    APP._setSelectedPositionLatLng event.target, event.target._latlng.lat, event.target._latlng.lng, address
    switch event.type
      when 'click'
        `;`
      when 'dblclick'
        #VoyageX.Main.markerManager().get().bindPopup("").openPopup({minWidth: '100px'});
        $('#poi_note_input').html('')
        VoyageX.TemplateHelper.poiNoteInputHtml('poi_note_input')
        if window.isMobile()
          $('#open_upload_data_btn').click()
        else
          #$('#poi_note_input').css('display', 'block')
          $('#upload_data_conrols').dialog('open')
          if ! $('#upload_data_conrols').parent().hasClass('seethrough_panel')
            $('#upload_data_conrols').parent().addClass('seethrough_panel')
      else
        # click is handled by mapclick
        APP.publishPosition()

  @commChannels: () ->
    Main._COMM_CHANNELS.slice(0)

  @storageController: () ->
    Main._STORAGE_CONTROLLER

  @mapControl: () ->
    Main._MAP_CONTROL

  @map: () ->
    Main._MAP_CONTROL.map()

  @markerManager: () ->
    Main._MARKER_MANAGER

  @storage: () ->
    Main._STORAGE_MODEL

  @instance: () ->
    Main._SINGLETON
