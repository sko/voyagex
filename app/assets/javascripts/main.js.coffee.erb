<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

class window.VoyageX.Main
  
  @_SINGLETON = null
  @_STORAGE_CONTROLLER = null
  @_MAP_CONTROL = null
  @_MARKER_MANAGER = null
  @_COMM_CHANNELS = ['system', 'talk', 'map_events', 'uploads']
  @_STORAGE_MODEL = null

  constructor: (cacheStrategy, view, mapOptions, offlineZooms, online) ->
    Main._SINGLETON = this
    window.APP = this
    @_version = new VoyageX.Version [0, 1]
    @_initState = 0
    @_online = online
    @_navigatorOnline = online
    @_view = view
    @_comm = null
    @_selectedPosition = {lat: -1.0, lng: -1.0, address: null}
    @_curPOI = null
    #@_initPoisOnMap = []
    Main._STORAGE_MODEL = new Storage.Model()
    # at first the map need's to be initialized ...
    $(document).ready () ->
        APP._init cacheStrategy, view, mapOptions, offlineZooms
        # test for address-bar removal / fullscreen @see application.mobile as well
#        if isMobile()
#          if !window.pageYOffset
#            hideAddressBar()

  _init: (cacheStrategy, view, mapOptions, offlineZooms) ->
    APP._initState += 1
    switch APP._initState
      when 1
        Main._STORAGE_CONTROLLER = new Comm.StorageController((initError) ->
            console.log 'StorageController initialized FileSystem with message: '+(if initError then 'FAILED' else 'OK')
            APP._init cacheStrategy, view, mapOptions, offlineZooms
          )
      when 2
        APP._comm = new Comm.Comm(APP.userId(),
                                  [['/talk', view._talkCB, VoyageX.CHANNEL_ENC_KEY],
                                   ['/map_events', view._mapEventsCB, VoyageX.CHANNEL_ENC_KEY],
                                   ['/uploads', view._uploadsCB, VoyageX.CHANNEL_ENC_KEY]],
                                   VoyageX.SYS_CHANNEL_ENC_KEY,
                                   APP._systemCB)
        Main._MAP_CONTROL = new VoyageX.MapControl cacheStrategy, mapOptions, offlineZooms
        Main._MARKER_MANAGER = new VoyageX.MarkerManager(APP.map())
        if navigator.geolocation 
          navigator.geolocation.getCurrentPosition(APP._initPositionCB, (error) ->
              #alert('geolocation timed out - manual selection required.\nsetting default location...')
              APP._initPositionCB { coords: { latitude: window.currentUser.lastLocation.lat, longitude: window.currentUser.lastLocation.lng } }
          , { enableHighAccuracy: true, timeout : 5000 })
#       #APP.map().on('locationfound', (e) ->
#       #    alert('found location...')
#       #  )
#       #APP.map().on('locationerror', (e) ->
#       #    alert('geolocation timed out - manual selection required.\nsetting default location...')
#       #  )
        #APP._initPositionCB { coords: { latitude: defaultLatLng[0], longitude: defaultLatLng[1] } }
        if isMobile()
          APP.map().invalidateSize({
              reset: true,
              pan: false,
              animate: false
            })
          $('#panel_control').draggable({
#              start: (event, ui) ->
#                  console.log('dragging ...')
#              ,
#              drag: (event, ui) ->
#                  console.log('dragging ...')
            })
#          $( "#panel_control" ).on( "dragcreate", (event, ui) ->
#                  console.log('dragging ...')
#            )
        $('#zoom_level').html('<span style="color:white;">zoom: '+APP.map().getZoom()+'</span>')
        # next statement removes value from inputs!!
        #$("#network_state").buttonset()
        $('button[value=camera]').focus()
        APP._zoomEnd(null)
        cacheStats()

  userId: () ->
    window.currentUser.id

  userName: () ->
    window.currentUser.username

  isOnline: () ->
    if navigator.onLine
      unless @_navigatorOnline
        @_navigatorOnline = true
        console.log 'Main - isOnline: navigator switched to on-line ...'
        # TODO reload offline-cache files ...  remember them in array? until set data-attr
        #APP.map().invalidateSize({
        #    reset: true,
        #    pan: false,
        #    animate: false
        #  })
      @_online
    else
      if @_navigatorOnline
        @_navigatorOnline = false
        console.log 'Main - isOnline: navigator switched to off-line ...'
      false

  setOnline: () ->
    @_online = true
    Main._MAP_CONTROL._zooms.splice(0, Main._MAP_CONTROL._zooms.length)
    for n in [Main._MAP_CONTROL._minZoom..Main._MAP_CONTROL._maxZoom]
      Main._MAP_CONTROL._zooms.push n

  setOffline: () ->
    @_online = false
    Main._MAP_CONTROL._zooms.splice(0, Main._MAP_CONTROL._zooms.length)
    for n in Main._MAP_CONTROL._offlineZooms
      Main._MAP_CONTROL._zooms.push n
    
  resetConnection: (commSettingId) ->
    peerChannelEncKey = $('#i_follow_'+commSettingId).attr('data-channelEncKey')
    for channel in Main.commChannels()
      if channel == 'system'
        continue
      channelPath = '/'+channel
      unless window.VoyageX.USE_GLOBAL_SUBSCRIBE 
        channelPath += VoyageX.PEER_CHANNEL_PREFIX+peerChannelEncKey
      Comm.Comm.unsubscribeFrom channelPath, false
      Comm.Comm.subscribeTo channelPath, Comm.Comm.channelCallBacksJSON[channel].callback

  # TODO store with model local
  # TODO currently bookmarking is published - should it be?
  bookmarkLocation: (poiId = -1) ->
    if poiId == -1
      posLatLng = this.getSelectedPositionLatLng()
      #APP.panPosition(poi.lat, poi.lng, poi.address)
      APP.map().panTo(this.getSelectedPositionLatLng())
    else
      #poiId = $('#poi_notes_container').attr('data-poiId')
      poi = Main.storageController().get Comm.StorageController.poiKey({id: poiId})
      locationData = Main.storageController().getLocation poi.locationId
      posLatLng = [locationData.lat, locationData.lng]
    #this.publishPosition true, posLatLng
    Storage.Model.instance().addBookmark posLatLng, VoyageX.View.addBookmark
    
  #publishPosition: (bookmarkLocation = false, posLatLng = null, setHomeBase = false) ->
  publishPosition: () ->
    unless posLatLng?
      posLatLng = [@_selectedPosition.lat, @_selectedPosition.lng]
    @_comm.send('/map_events', {type: 'click',\
                                userId: APP.userId(),\
                                lat: posLatLng[0],\
                                lng: posLatLng[1]})#,\
                                #bookmarkLocation: bookmarkLocation,\
                                #setHomeBase: setHomeBase})
    $('#marker_controls').closest('.leaflet-popup').children('.leaflet-popup-close-button').click()

  publishMessage: (publishText) ->
    @_comm.send('/talk', {type: 'message',\
                          userId: APP.userId(),\
                          text: APP.userName()+': '+publishText})

  getMarker: (poi) ->
    markerMeta = Main.markerManager().forPoi poi.id
    if markerMeta?
      return markerMeta.marker
    else
      return Main.markerManager().add(poi, Main._markerEventsCB, false)

  getOpenPopupMarker: () ->
    userMarkerPopupPanel = $('#marker_controls')
    if userMarkerPopupPanel.length >= 1
      marker = Main.markerManager().get()
    else
      poiMarkerPopupPanel = $('#poi_notes_container')
      if poiMarkerPopupPanel.length >= 1
        poiId = parseInt poiMarkerPopupPanel.attr('data-poiId')
        marker = APP.getMarker {id: poiId}
      else
        marker = null
    marker

  setHomeBase: () ->
    #this.publishPosition false, null, true
    Storage.Model.instance().setHomeBase @_selectedPosition.lat, @_selectedPosition.lng, (user) ->
        window.currentUser.homebaseLocationId = user.home_base.id

  loadLocation: (locationId) ->
    Storage.Model.instance().withLocation locationId, (location) ->
        APP._initPositionCB { coords: { latitude: location.lat, longitude: location.lng } }, location.address, true
        if isMobile()
          $("#photo_nav_panel").panel("close")
        else
          photoNavPanel.dialog("close")
#        # other 2 tabs will not change content - they are loaded from tsart on
#        selectedTab = $('#photo_nav_panel ul[role=tablist] [class~=ui-tabs-active]').attr('aria-controls')
#        if selectedTab != 'pois_preview'
#          #$('#pois_preview_btn').click()
#          APP.photoNav()
#          $('#'+selectedTab+'_btn').click()
#        else
#          APP.photoNav()
        if location.poiId
          APP.showPOI location.poiId, -1
        else
          $('#current_address').html(location.address+' ('+locationId+')')
          openPopupMarker = APP.getOpenPopupMarker()
          if openPopupMarker? && openPopupMarker != Main.markerManager().get()
            openPopupMarker.closePopup()
          #Main.markerManager().userMarkerMouseOver true
        if APP.map().getZoom() < 15
          APP.map().setZoom 15
        #Main.markerManager().get().setLatLng(L.latLng(location.lat, location.lng))

  showPOI: (poiId, poiNoteId) ->
    Storage.Model.instance().loadPoiNotes poiId, poiNoteId, (poi) ->
        #APP.panPosition(poi.lat, poi.lng, poi.address)
        VoyageX.TemplateHelper.openPOINotePopup poi
        APP.view().scrollToPoiNote poiNoteId
    if isMobile()
      $("#photo_nav_panel").panel("close")
    else
      photoNavPanel.dialog("close")

  getSelectedPositionLatLng: () ->
    return [@_selectedPosition.lat, @_selectedPosition.lng]

  _setSelectedPositionLatLng: (marker, lat, lng, address) ->
    poi = {lat: lat, lng: lng}
    if marker == null
      marker = Main.markerManager().add poi, Main._markerEventsCB
    else
      marker = Main.markerManager().sel marker, lat, lng, Main._markerEventsCB
    @_selectedPosition.lat = lat
    @_selectedPosition.lng = lng
    @_selectedPosition.address = address
#    if address != null
#      $('#cur_loc_addr').html(address) 
    if showSearchRadius
      Main.markerManager().searchBounds(VoyageX.SEARCH_RADIUS_METERS, APP.map())

  _zoomEnd: (e) ->
    $('#zoom_level').html('<span style="color:white;">zoom: '+APP.map().getZoom()+'</span>')

  _initPositionCB: (position, address = null, isReInit = false) ->
    poi = {lat: position.coords.latitude, lng: position.coords.longitude}
    if isReInit
      marker = Main.markerManager().get()
    else
      marker = Main.markerManager().add poi, Main._markerEventsCB, true
    APP._setSelectedPositionLatLng marker, position.coords.latitude, position.coords.longitude, address
    APP.map().panTo([position.coords.latitude, position.coords.longitude])
    #APP.map().setView [position.coords.latitude, position.coords.longitude], 16
    unless isReInit
      APP.publishPosition()
    Storage.Model.instance().loadPois poi.lat, poi.lng, (poi) ->
      marker = Main.markerManager().add poi, Main._markerEventsCB, false
      #APP._initPoisOnMap.push poi

  _systemCB: (message) ->
    console.log 'got a system - message: ' + message.type
    if message.type == 'ready_notification'
      # subscribe to all channels stored in subscribeTo-buffer
      while (channelPath = subscribeTo.pop())
        i = channelPath.indexOf(VoyageX.PEER_CHANNEL_PREFIX)
        channel = (if i == -1 then channelPath else channelPath.substr(0, i)).substr(1)
        Comm.Comm.subscribeTo channelPath, Comm.Comm.channelCallBacksJSON[channel].callback # eval(channel+'CB')
    else if message.type == 'subscription_grant_request'
    else if message.type == 'subscription_granted'
      for channel in Main.commChannels()
        if channel == 'system'
          continue
        channelPath = '/'+channel
        unless VoyageX.USE_GLOBAL_SUBSCRIBE
          channelPath += VoyageX.PEER_CHANNEL_PREFIX+message.peer.channel_enc_key
        Comm.Comm.subscribeTo channelPath, Comm.Comm.channelCallBacksJSON[channel].callback # eval(channel+'CB')
    else if message.type == 'subscription_denied'
    else if message.type == 'subscription_grant_revoked'
      for channel in Main.commChannels()
        if channel == 'system'
          continue
        channelPath = '/'+channel
        unless VoyageX.USE_GLOBAL_SUBSCRIBE
          channelPath += VoyageX.PEER_CHANNEL_PREFIX+message.peer.channel_enc_key
        Comm.Comm.unsubscribeFrom channelPath
    else if message.type == 'quit_subscription'
      true # do nothing
    APP._view._systemCB message

  panPosition: (lat, lng, address) ->
    APP._setSelectedPositionLatLng Main.markerManager().get(), lat, lng, address
    APP.map().panTo([lat, lng])
    #APP.map().setView([lat, lng], 16)
    #VoyageX.NavBar.menuNavClick('map')

  # TODO: provide callback
  photoNav: () ->
#    selectedTab = $('#photo_nav_panel ul[role=tablist] [class~=ui-tabs-active]').attr('aria-controls')
#    switch selectedTab
#      when 'pois_preview'
    # pois have already been loaded - when map got initialized - and are updated with the syncer
    # @see _initPositionCB
    # BUT! notes have not been loaded maybe
    #searchBounds = Main.markerManager().searchBounds(VoyageX.SEARCH_RADIUS_METERS, this.map())
    searchBounds = window.searchBounds @_selectedPosition.lat, @_selectedPosition.lng, VoyageX.SEARCH_RADIUS_METERS
    pois = Main.storageController().getPois (poi) ->
        if poi.lat > searchBounds.lat_south && poi.lat < searchBounds.lat_north &&
           poi.lng > searchBounds.lng_east && poi.lng < searchBounds.lng_west
#          unless poi.notes && poi.notes.length >= 1
          # dummy-poiNote for swiper - replaced when attachments are loaded
          unless poi.notes? && poi.notes.length >= 1
            poi.notes = [{id: -1, attachment: {url: '/assets/loading_200x100.png', width: 200, height: 100}}]
          Storage.Model.instance().loadPoiNotes poi.id, null, (poiClone) ->
              swiperDummy = $('#poi_swiper_'+poi.id+' [data-poiNoteId=-1]')
              if swiperDummy.length >= 1
                # if there is a template ist must be swiper's loading-dummy
                swiperDummy.remove()
                for note in poiClone.notes
                  swiperSlideHtml = VoyageX.TemplateHelper.swiperSlideHtml poi, note
                  $('#poi_swiper_'+poi.id+' .swiper-wrapper').append(swiperSlideHtml)
                  mySwiper = window['myPoiSwiper'+poi.id]
                  mySwiper.reInit()
              else
                # template didn't insert swiperDummy yet, so we can use the real data
                poi.notes = poiClone.notes
          return true
        else
          return false
    this.view().previewPois pois
#      when 'location_bookmarks'
#        Main.storage().photoNav @_selectedPosition.lat, @_selectedPosition.lng, (pois) ->
#            console.log('TODO: APP.photonav for location_bookmarks ...')
#      when 'people_of_interest'
#        Main.storage().photoNav @_selectedPosition.lat, @_selectedPosition.lng, (pois) -> 
#            console.log('TODO: APP.photonav for people_of_interest ...')
#      else
#        alert('unknown photoNav-tab '+selectedTab)

  markerControls: () ->
    marker = Main.markerManager().get()
    address = null
    APP._setSelectedPositionLatLng marker, marker._latlng.lat, marker._latlng.lng, address
    VoyageX.TemplateHelper.openMarkerControlsPopup()

  poiNoteInput: () ->
    $('#poi_note_input').html('')
    VoyageX.TemplateHelper.poiNoteInputHtml('poi_note_input')
    if isMobile()
      $('#open_upload_data_btn').click()
    else
      #$('#poi_note_input').css('display', 'block')
      $('#upload_data_conrols').dialog('open')
      if ! $('#upload_data_conrols').parent().hasClass('seethrough_panel')
        $('#upload_data_conrols').parent().addClass('seethrough_panel')

  # just closes marker specified by contentId - not any other
  preTogglePopup: (contentId) ->
    openPopup = $('#'+contentId)
    if openPopup.length >= 1
      if contentId == 'marker_controls'
        openPopupMarker = Main.markerManager().get()
      else
        poiId = parseInt openPopup.attr('data-poiId')
        openPopupMarker = APP.getMarker {id: poiId}
      if openPopupMarker.getPopup()? && openPopupMarker.getPopup()._isOpen
        Main._checkSaveNote()
        openPopupMarker.closePopup()

  @closePopupCB: (leafletMarker) ->
    (event) ->
        meta = Main.markerManager().meta leafletMarker
        console.log('closePopupCB: leafletMarker = '+Main.markerManager().toString(leafletMarker, meta))
        Main._checkSaveNote()
        Main.markerManager().userMarkerMouseOver true

  @_checkSaveNote: () ->
    textArea = $('#note_editor textarea')
    if textArea.length >= 1
      locationId = parseInt textArea.attr('id').match(/[0-9]+$/)[0]
      console.log('_checkSaveNote: saving note for location '+Comm.StorageController.instance().getLocation(locationId).address)
      Storage.Model.instance().addNote locationId, textArea.val()

  @_markerEventsCB: (event) ->
    address = null
    switch event.type
      when 'click'
        markerMeta = Main.markerManager().meta event.target
        if markerMeta.isUserMarker
          unless Main.markerManager().userMarkerMouseOver()
            # click on user-marker while poi-marker is open
            APP.preTogglePopup 'poi_notes_container'
            Main.markerManager().userMarkerMouseOver true 
            APP.markerControls()
        else
        #unless markerMeta.isUserMarker
          if event.target.getPopup() && event.target.getPopup()._isOpen
            # click on poi-marker with open popup
            Main._checkSaveNote()
            event.target.closePopup()
            Main.markerManager().userMarkerMouseOver true
            `;`
          else
            # click on poi-marker with no popup
            if event.target == Main.markerManager().get()
              APP.preTogglePopup 'marker_controls'
            else
              Main._checkSaveNote()
              #will be closed automatically: openPopupMarker = APP.getOpenPopupMarker()
            Storage.Model.instance().loadPoiNotes markerMeta.poi.id, null, (poi) ->
                # userMarkerMouseOver is set in openPOINotePopup
                VoyageX.TemplateHelper.openPOINotePopup poi, event.target
      when 'mouseover'
        markerMeta = Main.markerManager().meta event.target
        if markerMeta.isUserMarker && Main.markerManager().userMarkerMouseOver()
          unless event.target.getPopup() && event.target.getPopup()._isOpen
            # click on user-marker with no popup
            APP.preTogglePopup 'poi_notes_container'
            APP.markerControls()
      when 'dblclick'
        APP._setSelectedPositionLatLng event.target, event.target._latlng.lat, event.target._latlng.lng, address
        APP.poiNoteInput()
      else
        APP._setSelectedPositionLatLng event.target, event.target._latlng.lat, event.target._latlng.lng, address
        APP.publishPosition()

  @commChannels: () ->
    Main._COMM_CHANNELS.slice(0)

  # @deprecated - use APP.storage()
  @storageController: () ->
    Main._STORAGE_CONTROLLER

  storage: () ->
    Main._STORAGE_CONTROLLER

  @mapControl: () ->
    Main._MAP_CONTROL

  map: () ->
    Main._MAP_CONTROL.map()

  @markerManager: () ->
    Main._MARKER_MANAGER

  @storage: () ->
    Main._STORAGE_MODEL

  @instance: () ->
    Main._SINGLETON

  view: () ->
    @_view
