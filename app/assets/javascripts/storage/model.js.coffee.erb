<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

class window.Storage.Model
 
  @_SINGLETON = null

  constructor: () ->
    Model._SINGLETON = this

# {"poi":{"id":2,"lat":51.3767,"lng":7.49389,"address":"Germany, North-Rhine-Westphalia, L704",
# "notes":[
# {"id":97,"user":{"id":101,"username":"tomas"},"text":"frohes fest","attachment":{"content_type":"image/jpeg","id":265,"url":"/assets/files/84/original/hagen_feu-campus.jpg?1419236682","width":500,"height":334}},
# {"id":98,"user":{"id":101,"username":"tomas"},"text":"leider verfahren","attachment":{"content_type":"image/jpeg","id":266,"url":"/assets/files/85/original/berlin_aktion-belaestigung.jpg?1419236733","width":860,"height":649}}
# ]}}
  #
  # store poi
  # if online - compare pois (merge), else use stored poi
  # megr on server? or here? how to diff?
  # each entry is line - line here != line remote
  # if id == id - modified
  # else inserted / removed
  #
  loadPoiNotes: (uploadId, callback) ->
    $.ajax
      type: 'GET'
      dataType: 'json'
      url: '<%= upload_comments_path(upload_id: '') %>'+uploadId
    .done (msg) ->
#        for note in msg.poi.notes
#          # store image
         #attachmentUrl = Model._viewPoiNoteAttachment msg.poi
#        addToList 'poi.'+msg.poi.id, 'push', msg.poi.notes
        callback msg.poi
    .fail (jqXHR, textStatus) ->
        # get from localStorage
        console.log('TODO: maybe get from local storage')
        #alert('TODO: handle registration failure...')

  # @see VoyageX.MapControl - drawTile
  @_viewPoiNoteAttachment: (poiNote) ->
    storeKey = 'poiNote.'+poiNote.id+'.attachment'
    if Comm.StorageController.isFileBased()
      # use File-API
      console.log '_viewPoiNoteAttachment - ........................................'+storeKey
      # TODO ? maybe just query offline-zoom-files - see MapControl.tileUrl else of if view.zoom in mC._offlineZooms
      # NO - because other zoom-levels may trigger some extra-action (liek prefetch ...)
      deferredModeParams = { poiNote: poiNote,\
                             save: true,\
                             deferred: $.Deferred(),\
                             promise: null }
      Comm.StorageController.instance().getPoiNoteAttachment storeKey, deferredModeParams
      deferredModeParams.promise
    else
      # use localStorage
      stored = Comm.StorageController.instance().getPoiNoteAttachment storeKey
      unless stored?
        Model.attachmentUrl poiNote
      else
        console.log 'using cached tile: '+storeKey
        stored
   
  @attachmentUrl: (poiNote, deferredModeParams = null) ->
    if APP.isOnline()
      readyImage = this.cacheAttachment poiNote, deferredModeParams
    else
      readyImage = this._notInCacheImage $('#tile_canvas')[0], view.tile.column, view.tile.row, view.zoom
      if deferredModeParams != null
        Comm.StorageController.instance().resolveOfflineNotInCache readyImage, deferredModeParams
      readyImage

  cacheAttachment: (poiNote, deferredModeParams = null) ->
    if Comm.StorageController.isFileBased()
      #Comm.StorageController.instance().loadAndPrefetchTile prefetchParams
      #  VoyageX.MapControl.loadAndPrefetch deferredModeParams.mC, xYZ, deferredModeParams.view.subdomain, deferredModeParams
    else
      stored = Comm.StorageController.instance().getPoiNoteAttachment poiNote, deferredModeParams
     #unless stored? && (deferredModeParams==null || !deferredModeParams.loadAndPrefetch?)
      unless stored?
        console.log 'prefetching area tile: '+storeKey
        readyImage = MapControl.loadAndPrefetch MapControl.instance(), curXYZ, view.subdomain, deferredModeParams
        if addToX == 0 and addToY == 0
          centerTile = readyImage
      else
        #console.log 'area tile already cached: '+storeKey
        if addToX == 0 and addToY == 0
          centerTile = stored

  @instance: () ->
    Model._SINGLETON

  _notInCacheImage: (canvas, x, y, z) ->
    canvas.width = 256
    canvas.height = 256
    context = canvas.getContext('2d')
    context.fillStyle = "black";
    context.fillRect(0,0,256,256);
    context.fillStyle = "white";
    context.fillRect(1,1,254,254);
    context.fillStyle = "blue";
    context.font = "bold 16px Arial";
    context.fillText("Not Cached", 100, 80);
    context.fillText(z+' / '+x+' / '+y, 40, 110);
    canvas.toDataURL(@_tileImageContentType)
