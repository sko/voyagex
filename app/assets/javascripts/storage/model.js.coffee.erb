<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

class window.Storage.Model
 
  @_SINGLETON = null

  constructor: () ->
    Model._SINGLETON = this

# {"poi":{"id":2,"lat":51.3767,"lng":7.49389,"address":"Germany, North-Rhine-Westphalia, L704",
# "notes":[
# {"id":97,"user":{"id":101,"username":"tomas"},"text":"frohes fest","attachment":{"content_type":"image/jpeg","id":265,"url":"/assets/files/84/original/hagen_feu-campus.jpg?1419236682","width":500,"height":334}},
# {"id":98,"user":{"id":101,"username":"tomas"},"text":"leider verfahren","attachment":{"content_type":"image/jpeg","id":266,"url":"/assets/files/85/original/berlin_aktion-belaestigung.jpg?1419236733","width":860,"height":649}}
# ]}}
  #
  # store poi
  # if online - compare pois (merge), else use stored poi
  # megr on server? or here? how to diff?
  # each entry is line - line here != line remote
  # if id == id - modified
  # else inserted / removed
  #
  loadPoiNotes: (poiId, poiNoteId, callback) ->
    $.ajax
      type: 'GET'
      dataType: 'json'
      url: '<%= upload_comments_path(upload_id: '') %>'+poiNoteId
    .done (msg) ->
        for note, i in msg.poi.notes
          Model._syncWithStorage msg, callback, note, i
        #callback msg.poi
    .fail (jqXHR, textStatus) ->
        # get from localStorage
        console.log('TODO: maybe get from local storage')
        #existingPoiNotes = Comm.StorageController.get Comm.StorageController.poiKey({id: poiId})

  @_syncWithStorage: (msg, callback, note, i) ->
    # store image
    attachmentUrl = Model._viewPoiNoteAttachment note
    # @see leaflet-funbctionaltilelayer _loadTile: function / MapControl - drawTile
    if (typeof attachmentUrl == 'string') 
      console.log '_syncWithStorage - attachmentUrl-string = '+attachmentUrl
      if i == (msg.poi.notes.length - 1)
        #console.log '_syncWithStorage - saving poiNotes ...'
        existingPoiData = Comm.StorageController.instance().get Comm.StorageController.poiKey(msg.poi)
        unless existingPoiData?
          Comm.StorageController.instance().addToList Comm.StorageController.poiKey(msg.poi), 'push', msg.poi.notes
        #console.log '_syncWithStorage - calling back ...'
        callback msg.poi
    else if (typeof attachmentUrl.then == 'function') 
      # Assume we are dealing with a promise.
      attachmentUrl.then (url) ->
          console.log '_syncWithStorage - attachmentUrl-promise resolved to: '+url
          note.attachment.url = url
          if i == (msg.poi.notes.length - 1)
            #console.log '_syncWithStorage - saving poiNotes ...'
            existingPoiData = Comm.StorageController.instance().get Comm.StorageController.poiKey(msg.poi)
            unless existingPoiData?
              Comm.StorageController.instance().addToList Comm.StorageController.poiKey(msg.poi), 'push', msg.poi.notes
            #console.log '_syncWithStorage - calling back ...'
            callback msg.poi

  @_viewPoiNoteAttachment: (poiNote) ->
    storeKey = Comm.StorageController.poiNoteAttachmentKey poiNote
    if Comm.StorageController.isFileBased()
      # use File-API
      console.log '_viewPoiNoteAttachment - ........................................'+storeKey
      # TODO ? maybe just query offline-zoom-files - see MapControl.tileUrl else of if view.zoom in mC._offlineZooms
      # NO - because other zoom-levels may trigger some extra-action (liek prefetch ...)
      deferredModeParams = { attachmentUrl: Model.attachmentUrl,\
                             poiNote: poiNote,\
                             save: true,\
                             deferred: $.Deferred(),\
                             promise: null }
      Comm.StorageController.instance().getPoiNoteAttachment poiNote, deferredModeParams
      deferredModeParams.promise
    else
      # use localStorage
      stored = Comm.StorageController.instance().getPoiNoteAttachment poiNote
      unless stored?
        Model.attachmentUrl poiNote
      else
        console.log 'using cached tile: '+storeKey
        stored
   
  @attachmentUrl: (poiNote, deferredModeParams = null) ->
    if APP.isOnline()
      readyImage = Model._SINGLETON.cacheAttachment poiNote, deferredModeParams
    else
      readyImage = Model._SINGLETON._notInCacheImage $('#attachment_canvas')[0], poiNote
      if deferredModeParams != null
        Comm.StorageController.instance().resolveOfflineNotInCache readyImage, deferredModeParams
      readyImage

  cacheAttachment: (poiNote, deferredModeParams = null) ->
    if Comm.StorageController.isFileBased()
      attachment = this._loadReadyImage poiNote, deferredModeParams
    else
      attachment = Comm.StorageController.instance().getPoiNoteAttachment poiNote, deferredModeParams
      unless attachment?
        #console.log 'cacheAttachment - '+Comm.StorageController.poiNoteAttachmentKey(poiNote)
        attachment = this._loadReadyImage poiNote, deferredModeParams
      attachment

  @instance: () ->
    Model._SINGLETON

  # has to be done sequentially becaus we're using one canvas for all
  _loadReadyImage: (poiNote, deferredModeParams = null) ->
    if deferredModeParams == null
      promise = true
      deferred = $.Deferred()
    img = new Image
    img.crossOrigin = ''
    img.onload = (event) ->
      base64ImgDataUrl = Model._SINGLETON._toBase64 $('#attachment_canvas')[0], poiNote, this # event.target
      unless Comm.StorageController.isFileBased()
        Comm.StorageController.instance().storePoiNoteAttachment poiNote, base64ImgDataUrl, deferredModeParams
        cacheStats()
      else
        # actually we could store base64 in file as wall
        #Comm.StorageController.instance().storePoiNoteAttachment poiNote, base64ImgDataUrl, deferredModeParams
        $('#attachment_canvas')[0].toBlob((blob) ->
            Comm.StorageController.instance().storePoiNoteAttachment poiNote, blob, deferredModeParams
          )
      if promise
        deferred.resolve(base64ImgDataUrl)
    if promise
      readyImg = deferred.promise()
      img.src = poiNote.attachment.url
      readyImg
    else
      img.src = poiNote.attachment.url
      null

  _toBase64: (canvas, poiNote, image) ->
    canvas.width = poiNote.attachment.width
    canvas.height = poiNote.attachment.height
    context = canvas.getContext('2d')
    context.drawImage(image, 0, 0)
    canvas.toDataURL(poiNote.attachment.content_type)

  _notInCacheImage: (canvas, poiNote) ->
    canvas.width = poiNote.attachment.width
    canvas.height = poiNote.attachment.height
    context = canvas.getContext('2d')
    context.fillStyle = "black";
    context.fillRect(0,0,poiNote.attachment.width,poiNote.attachment.height);
    context.fillStyle = "white";
    context.fillRect(1,1,poiNote.attachment.width-2,poiNote.attachment.height-2);
    context.fillStyle = "blue";
    context.font = "bold 16px Arial";
    context.fillText("Not Cached", 100, 80);
    context.fillText(poiNote.attachment.content_type, 40, 110);
    canvas.toDataURL(@_tileImageContentType)
