<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

# feu: [51.3767, 7.49389]
window.defaultLatLng = [51.3767, 7.49389]
#window.defaultLatLng = [0, 0]
window.showSearchRadius = false
jQuery ->
  #window.markerManager = null

  comm = null
  selectedPositionLatLng = [-1, -1]
  
  window.toggleHomeTab = (selected) ->
    if selected.value == 'administration'
      $('#content_uploads').css('display', 'none')
      $('#administration').css('display', 'block')
    else
      $('#content_uploads').css('display', 'block')
      $('#administration').css('display', 'none')

  window.photoClicked = (swiper) ->
    $('#current_address').html($(swiper.clickedSlide).attr('data-address'))
    panUpload($(swiper.clickedSlide).attr('data-id'))

  window.photoChanged = (swiper) ->
    $('#current_address').html($(swiper.activeSlide()).attr('data-address'))

  #  onSlideClick: window.photoClicked,
  window.mySwiper = $('.swiper-container').swiper({
    mode:'horizontal',
    loop: false,
    freeModeFluid: true,
    onSlideChangeEnd: window.photoChanged
  })

  window.toggleSearchRadiusDisplay = (selected) ->
    if selected.id == 'search_radius_display_show'
      window.showSearchRadius = true
      #VoyageX.Main.markerManager()._showSearchRadius = true
      VoyageX.Main.markerManager().searchBounds(VoyageX.SEARCH_RADIUS_METERS, VoyageX.Main.map())
    else
      window.showSearchRadius = false
      #VoyageX.Main.markerManager()._showSearchRadius = false
      VoyageX.Main.markerManager().searchBounds(0, VoyageX.Main.map())

  window.toggleNetworkState = (selected) ->
    if selected.id == 'network_state_online'
      VoyageX.MapControl._instance().setOnline()
    else
      VoyageX.MapControl._instance().setOffline()

  window.openUploadCommentControls = (upload_id) ->
    #$("#upload_comment_conrols").css('display', 'block')
    VoyageX.NavBar.menuNavClick('map')
    unless window.isMobile()
      $("#upload_comment_conrols").dialog("open")

  $('#add_upload_comment_btn').on 'click', (event) ->
    upload_id = $('#add_upload_comment_upload_id').val()
    $.ajax
      type: 'POST'
      dataType: 'script'
      url: '<%= create_upload_comment_path(upload_id: '') %>'+upload_id
      data: { _method: 'put',\
              user_id: $('#current_user_id').val(),\
              text: $('#add_upload_comment_text').val() }
    $('#add_upload_comment_text').val('')
    #$("#upload_comment_conrols").css('display', 'none')
    if window.isMobile()
      #if $('#upload_comment_conrols').hasClass('ui-popup-active')
      #  $('#upload_comment_conrols').removeClass('ui-popup-active').addClass('ui-popup-hidden')
      $('#upload_comment_cancel').click()
    else
      uploadCommentDialog.dialog("close")

  window.panUpload = (upload_id) ->
    getUploadComments(upload_id)
    if window.isMobile()
      $("#photo_nav_panel").panel("close")

  window.panPosition = (lat, lng, address) ->
    setSelectedPositionLatLng VoyageX.Main.markerManager().get(), lat, lng, address
    VoyageX.Main.map().panTo([lat, lng])
    #VoyageX.Main.map().setView([lat, lng], 16)
    VoyageX.NavBar.menuNavClick('map')

  window.getSelectedPositionLatLng = () ->
    return [selectedPositionLatLng[0], selectedPositionLatLng[1]]

  window.zoomEnd = (e) ->
    $('#zoom_level').html('<span style="color:white;">zoom: '+VoyageX.Main.map().getZoom()+'</span>')

  getUploadComments = (upload_id) ->
    $.ajax
      type: 'GET'
      dataType: 'script'
      url: '<%= upload_comments_path(upload_id: '') %>'+upload_id

  window.setSelectedPositionLatLng = (marker, lat, lng, address) ->
    if marker == null
      marker = VoyageX.Main.markerManager().add lat, lng, markerEventsCB
    else
      marker = VoyageX.Main.markerManager().sel marker, lat, lng, markerEventsCB
    selectedPositionLatLng[0] = lat
    selectedPositionLatLng[1] = lng
    if address != null
      $('#cur_loc_addr').html(address) 
    if showSearchRadius
      VoyageX.Main.markerManager().searchBounds(VoyageX.SEARCH_RADIUS_METERS, VoyageX.Main.map())

  window.publishPosition = () ->
    APP.comm().send('/map_events', {type: 'click',\
                                    userId: $('#current_user_id').val(),\
                                    lat: selectedPositionLatLng[0],\
                                    lng: selectedPositionLatLng[1]})

  window.initPositionCB = (position) ->
    address = null
    marker = VoyageX.Main.markerManager().sel null, position.coords.latitude, position.coords.longitude, markerEventsCB
    setSelectedPositionLatLng marker, position.coords.latitude, position.coords.longitude, address
    VoyageX.Main.map().panTo([position.coords.latitude, position.coords.longitude])
    #VoyageX.Main.map().setView [position.coords.latitude, position.coords.longitude], 16
    publishPosition()

  markerEventsCB = (event) ->
    address = null
    setSelectedPositionLatLng event.target, event.target._latlng.lat, event.target._latlng.lng, address

  $('#message').on 'keyup', (event) ->
    if (event.which == 13 || event.keyCode == 13)
      event.preventDefault()
      endIdx = $(this).val().indexOf('\n---')
      if endIdx == -1
        publishText = $(this).val()
      else
        publishText = $(this).val().substr(0, endIdx)
      APP.comm().send('/talk', {type: 'message',\
                                text: $('#current_user_id').val()+': '+publishText,\
                                userId: $('#current_user_id').val()})
      $(this).val('\n-------------------------\n'+$(this).val())
      $(this).selectRange(0) 
    
  $(document).on 'click', '#clear_cache', (event) ->
    Comm.StorageController.instance().delete('tiles')
    cacheStats()

#  $(document).ready () ->
#    comm = new Comm.Comm($('#current_user_id').val(),
#                         [['/talk', talkCB, window.VoyageX.CHANNEL_ENC_KEY],
#                          ['/map_events', mapEventsCB, window.VoyageX.CHANNEL_ENC_KEY],
#                          ['/uploads', uploadsCB, window.VoyageX.CHANNEL_ENC_KEY]],
#                         window.VoyageX.SYS_CHANNEL_ENC_KEY,
#                         systemCB)
#    window.markerManager = new VoyageX.MarkerManager(VoyageX.Main.map())
#    if window.isMobile()
#      VoyageX.Main.map().invalidateSize({
#          reset: true,
#          pan: false,
#          animate: false
#        })
#    initPositionCB { coords: { latitude: defaultLatLng[0], longitude: defaultLatLng[1] } }
##    if navigator.geolocation 
##      navigator.geolocation.getCurrentPosition(initPositionCB, (error) ->
##          alert('geolocation timed out - manual selection required.\nsetting default location...')
##          initPositionCB { coords: { latitude: defaultLatLng[0], longitude: defaultLatLng[1] } }
##      , { enableHighAccuracy: true, timeout : 10000 })
##    #VoyageX.Main.map().on('locationfound', (e) ->
##    #    alert('found location...')
##    #  )
##    #VoyageX.Main.map().on('locationerror', (e) ->
##    #    alert('geolocation timed out - manual selection required.\nsetting default location...')
##    #  )
#    VoyageX.Main.map().on 'click', (event) ->
#      address = null
#      setSelectedPositionLatLng VoyageX.Main.markerManager().get()||VoyageX.Main.markerManager().add(event.latlng.lat, event.latlng.lng, markerEventsCB), event.latlng.lat, event.latlng.lng, address
#      publishPosition()
#    VoyageX.Main.map().on('zoomend', (e) ->
#        zoomEnd(e);
#      )
#    $('#zoom_level').html('<span style="color:white;">zoom: '+VoyageX.Main.map().getZoom()+'</span>')
#    # next statement removes value from inputs!!
#    $("#network_state").buttonset()
#    $('button[value=camera]').focus()
#    zoomEnd(null)
#    cacheStats()

