<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

# collects/sets-up upload-data from forms
class window.VoyageX.Uploads

  @_SINGLETON = null
  @CACHE_BEFORE_UPLOAD = true

  constructor: () ->
    Uploads._SINGLETON = this

  getUploadTargetId: () ->
    #commentsOnId = parseInt $('#upload_form').attr('data-commentsOnId')
    commentsOnIdMatch = $('#upload_form').attr('action').match(/^\/[^\/]+\/(-?[0-9]+)/)
    commentsOnId = (if commentsOnIdMatch? then parseInt(commentsOnIdMatch[1]) else null)

  # uploadStrategy: { add: () -> ..., done: afterCB }
  upload: (uploadStrategy) ->
    # used for offline-queueing
    if Uploads.CACHE_BEFORE_UPLOAD
      # complexity because of asynchronous-data prepare (blob)
      # data to save is set by uploadStrategy 
      transactionConf = { getTransaction: (afterSaveCB) -> # @see Model - savePoiNote
                              (poi, poiNote, saveCB) -> # @see Model - _queuePoiNote <=> queue (poi, poiNote, saveCB)
                                  uploadStrategy.saveData (data) -> # saveDataCB
                                      saveCB poi,
                                             poiNote,
                                             afterSaveCB,
                                             data }
      APP.model().savePoiNote uploadStrategy.done, transactionConf
    else
      selLatLng = APP.getSelectedPositionLatLng()
      data = { location: { latitude: selLatLng[0], longitude: selLatLng[1] },\
               comment: $('#upload_comment').val() }
      uploadStrategy.add data
      uploadTargetId = APP.transfer().getUploadTargetId()
      if uploadTargetId?
        uploadStrategy.do.call APP.model(), data, uploadStrategy.done, uploadTargetId
      else
        uploadStrategy.do.call APP.model(), data, uploadStrategy.done

 #batchUpload: (perPoiEntry, callback) ->
  batchUpload: (perPoiEntry) ->
    formData = new FormData()
    formData.append 'location[latitude]', perPoiEntry.location.lat
    formData.append 'location[longitude]', perPoiEntry.location.lng
    skipInputNames = ['location[latitude]','location[longitude]','poi_note[text]','poi_note[file]']
    for note in perPoiEntry.poi.notes
      if note.id >= 0
        continue
      formData.append 'poi_note_ids[]', note.id
      formData.append 'poi_note['+note.id+'][text]', note.text
      if perPoiEntry.fileData[note.id]?
        formData.append 'poi_note['+note.id+'][file]', perPoiEntry.fileData[note.id].file, perPoiEntry.fileData[note.id].name
      else if note.attachment? && note.attachment.content_type.match(/^embed:/)?
        formData.append 'poi_note['+note.id+'][embed][content_type]', note.attachment.content_type
        formData.append 'poi_note['+note.id+'][embed][content]', note.attachment.content
    uploadForm = $('#tmpl_poi_note_input #new_poi_note').first()
    uploadForm.find('input').each ((formData, skipInputNames) ->
        () ->
            if $.inArray($(this).attr('name'), skipInputNames) == -1
              formData.append($(this).attr('name'), $(this).attr('value'))
        )(formData, skipInputNames)
    # FIXME - orig callback is not afterUploadPhoto always
    APP.model().syncUploadCachedQPoiData formData,
                                         (if perPoiEntry.poi.id >= 0 then perPoiEntry.poi else null)#,
                                         #(if callback? then callback.cb(afterUploadPhoto) else afterUploadPhoto)

  toggleUploadType: (selected) ->
    if selected.value == 'file'
      $('#upload_cam_container').css('display', 'none')
      $('#upload_file_container').css('display', 'block')
      $('#upload_embed_container').css('display', 'none')
      $('#upload_plain_text_container').css('display', 'none')
    else if selected.value == 'camera'
      $('#upload_cam_container').css('display', 'block')
      $('#upload_file_container').css('display', 'none')
      $('#upload_embed_container').css('display', 'none')
      $('#upload_plain_text_container').css('display', 'none')
    else if selected.value == 'embed'
      $('#upload_cam_container').css('display', 'none')
      $('#upload_file_container').css('display', 'none')
      $('#upload_embed_container').css('display', 'block')
      $('#upload_plain_text_container').css('display', 'none')
    else
      $('#upload_cam_container').css('display', 'none')
      $('#upload_file_container').css('display', 'none')
      $('#upload_embed_container').css('display', 'none')
      $('#upload_plain_text_container').css('display', 'block')

  @instance: () ->
    unless Uploads._SINGLETON?
      Uploads._SINGLETON = new Uploads()
    Uploads._SINGLETON

jQuery ->
  window.toggleUploadType = (selected) ->
    APP.transfer().toggleUploadType selected

  window.batchUpload = (perPoiEntry, callback) ->
    APP.transfer().batchUpload perPoiEntry, callback

  afterUpload = (poi, newNotes) ->
    $('#upload_comment').val('')
    if $.mobile
#     if $('#upload_comment_conrols').hasClass('ui-popup-active')
#       $('#upload_comment_conrols').removeClass('ui-popup-active').addClass('ui-popup-hidden')
#     $('#upload_comment_cancel').click()
      $("#upload_data_panel").panel("close")
    else
      uploadDataDialog.dialog("close")
    #APP.panPosition poi.lat, poi.lng, poi.address
    VoyageX.View.addPoiNotes poi, newNotes

  # also called from iframe - that's why window.
  window.afterUploadPhoto = (poi, newNotes) ->
    # @see upload_comments.js.coffee
    $('#media_input_current').attr('src', '')
    afterUpload poi, newNotes

  afterCachePhoto = (poi, newNote) ->
    afterUploadPhoto poi, [newNote]

  $(document).on 'click', '#upload_button', (event) ->
    # don't send form
    event.stopPropagation()
    event.preventDefault()
    APP.transfer().upload { saveData: (saveDataCB) ->
        saveDataCB { blob: $('#fileupload')[0].files[0] }
      , done: (poi, newNote) ->
          $('#media_input_current').attr('src', '')
          afterUpload poi, [newNote]
      }
    
  $(document).on 'click', '#media_input_upload_btn', (event) ->
    APP.transfer().upload { saveData: (saveDataCB) ->
        $('#media_input_display')[0].toBlob((blob) ->
            saveDataCB { blob: blob, fileName: 'foto_'+APP.user().id }
          )
      , done: (poi, newNote) ->
          $('#media_input_current').attr('src', '')
          afterUpload poi, [newNote]
      }

  $(document).on 'click', '#embed_upload_btn', (event) ->
    APP.transfer().upload { saveData: (saveDataCB) ->
        saveDataCB { embed: $('#embed').val() }
      , done: (poi, newNote) ->
          $('#embed').val('')
          afterUpload poi, [newNote]
      }
    
  $(document).on 'click', '#plain_text_upload_btn', (event) ->
    APP.transfer().upload { saveData: (saveDataCB) ->
        saveDataCB {}
      , done: (poi, newNote) ->
          afterUpload poi, [newNote]
      }
    
  $(document).on 'click', '#user_foto_media_input_upload_btn', (event) ->
    # don't send form
    event.stopPropagation()
    event.preventDefault()
    fotoContentType = $('#user_foto_media_input_current').attr('src').match(/^data:([^;]+)/)[1]
    fotoData = $('#user_foto_media_input_current').attr('src').replace(/^data:image\/.+?base64,/,'')
    data = { foto_data: fotoData,\
             foto_content_type: fotoContentType }
    stopCurrentVideo()
    APP.model().saveUserFoto64 data, (user) ->
        $('#'+curPrefix.current+'media_input_capture').attr('src', '')
        $('#'+curPrefix.current+'media_input_current').attr('src', '')
        #$('.whoami-img').attr('src', user.foto.url)
        curU = APP.user()
        curU.foto.url = user.foto.url
        #APP.storage().saveCurrentUser curU
        USERS.refreshUserPhoto curU
        toogleUserFotoUpload()

  if $.mobile
    $(document).on 'click', '.show-page-loading-msg', () ->
      $this = $( this )
      theme = $this.jqmData( "theme" ) || $.mobile.loader.prototype.options.theme
      msgText = $this.jqmData( "msgtext" ) || $.mobile.loader.prototype.options.text
      textVisible = $this.jqmData( "textvisible" ) || $.mobile.loader.prototype.options.textVisible
      textonly = !!$this.jqmData( "textonly" )
      html = $this.jqmData( "html" ) || ""

      $.mobile.loading( 'show', {
        text: msgText,
        textVisible: textVisible,
        theme: theme,
        textonly: textonly,
        html: html
        })

    $(document).on 'click', '.hide-page-loading-msg', () ->
      $.mobile.loading( "hide" )

  curSelVidSrcIdx = 0
  mediaManager = new VoyageX.MediaManager()

  # photo / video
  localMediaStream = null
  mediaInputVideo = null
  mediaInputImage = null
  mediaInputCanvas = null
  selectedCameraActive = false

  switchCamera = () ->
    if selectedCameraActive
      stopCurrentVideo()
    curSelVidSrcIdx = mediaManager.nextSelectedVideoSrcIdx()
    takePhoto()

  $(document).on 'click', '#switch_camera', (event) ->
    switchCamera()

  $(document).on 'click', '#media_input_init', (event) ->
    $('#media_input_panel_show').click()
    takePhoto()

  $(document).on 'click', '#user_foto_media_input_init', (event) ->
    $('#user_foto_file_container').hide()
    $('#user_foto_cam_container').show()
    $('#user_foto_media_input_panel_show').click()
    takePhoto({capDis: 'user_foto_', current: 'user_foto_'})

  window.userFotoFileInputInit = () ->
    if curPrefix?
      stopCurrentVideo()
    $('#user_foto_cam_container').hide()
    $('#user_foto_file_container').show()

  $(document).on 'click', '#user_foto_file_input_init', (event) ->
    userFotoFileInputInit()

  window.userFotoMediaInputInitMobile = () ->
    $('#user_foto_file_container').hide()
    $('#user_foto_cam_container').show()
    $('#user_foto_media_input_panel_show').click()
    takePhoto({capDis: '', current: 'user_foto_'})
  
  $(document).on 'click', '#user_foto_media_input_init_mobile', (event) ->
      userFotoMediaInputInitMobile()

  $(document).on 'click', '#media_input_capture_btn', (event) ->
    snapshot()

  $(document).on 'click', '#media_input_stop_btn', (event) ->
    stopCurrentVideo()
    if $.mobile
      closeMediaInputPanel()
  
  $(document).on 'click', '#user_foto_media_input_capture_btn', (event) ->
    snapshot()

  $(document).on 'click', '#user_foto_media_input_stop_btn', (event) ->
    stopCurrentVideo()
    if $.mobile
      closeMediaInputPanel()

  #openCommentForm = () ->
  #  $("#open_upload_comment_btn").click()

  closeMediaInputPanel = () ->
    $("#media_input_panel").panel("close")
    if curPrefix.current == ''
      $('button[value=camera]').focus()
      # reopen panel
      # TODO: which one?
      $('#open_upload_data_btn').click()
      #$('#open_upload_comment_btn').click()

  stopCurrentVideo = () ->
    mediaInputVideo[0].pause()
    localMediaStream.stop() # Doesn't do anything in Chrome.

  snapshot = () ->
    if (localMediaStream) 
      sizeCanvas()
      ctx = mediaInputCanvas[0].getContext('2d')
      ctx.drawImage(mediaInputVideo[0], 0, 0)
      # "image/webp" works in Chrome.
      # Other browsers will fall back to image/png.
      mediaInputImage[0].src = mediaInputCanvas[0].toDataURL('image/webp')
      #mediaInputImage[0].src = mediaInputCanvas[0].toDataURL('image/png')
      #mediaInputImage.attr('src', mediaInputCanvas[0].toDataURL('image/webp'))
      $('#fileupload').attr('value', mediaInputImage[0].src)
      if $.mobile
        closeMediaInputPanel()

  curPrefix = null
  takePhoto = (prefix = {capDis: '', current: ''}) ->
    if (Modernizr.getusermedia)
      curPrefix = prefix
      $('#'+prefix.current+'media_input_container').css('display', 'block')
      gUM = Modernizr.prefixed('getUserMedia', navigator)
      if mediaManager.curSelectedVideoSrcIdx() >= 0
        constraints = mediaManager.constraintsForMediaSource(-1, curSelVidSrcIdx)
      else
        constraints = {video: true}
      gUM(constraints, (stream) ->
          # this is the success-callback
          mediaInputVideo = $('#'+prefix.capDis+'media_input_capture')
          mediaInputImage = $('#'+prefix.current+'media_input_current')
          mediaInputCanvas = $('#'+prefix.capDis+'media_input_display')
          mediaInputVideo.attr('src', window.URL.createObjectURL(stream))
          #mediaInputVideo.attr('controls', true)
          #mediaInputVideo.on 'click', () ->
          #    snapshot()
          #  , false
          localMediaStream = stream
          selectedCameraActive = true
          # video.onloadedmetadata not firing in Chrome so we have to hack.
          # See crbug.com/110938.
          setTimeout(() ->
              sizeCanvas()
          , 100)
          # Note: onloadedmetadata doesn't fire in Chrome when using it with getUserMedia.
          # See crbug.com/110938.
          mediaInputVideo[0].onloadedmetadata = (e) ->
            # Ready to go. Do some stuff.
        , errorCallback)

      #$(document).on 'click', '#media_input_capture', () ->
      #video.addEventListener('click', snapshot, false)
    #$('#media_input_init').hide()

  sizeCanvas = () ->
    mediaInputCanvas.attr('width', mediaInputVideo[0].videoWidth)
    mediaInputCanvas.attr('height', mediaInputVideo[0].videoHeight)
    #mediaInputImage.attr('height', mediaInputVideo[0].videoHeight)
    #mediaInputImage.attr('width', mediaInputVideo[0].videoWidth)
  
  errorCallback = (e) ->
    console.log('Reeeejected!', e)
    alert('Reeeejected!')
    if $.mobile
      $("#media_input_panel").panel("close")
      $('button[value=camera]').focus()

