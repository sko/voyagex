//= require comm/storage_controller

<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>
# Comm::Engine.routes.url_helpers

# curl -X POST http://192.168.1.4:3005/comm -H 'Content-Type: application/json' -d '{"channel":"/system@0rg94cpmy","data":{"type":"handshake", "hello":"world"}}'
class window.Comm.Comm

  @_SINGLETON = null

  client = null
  channelCallBacksJSON = null

#
# 1) on starting up the faye-client requests a channel-key from system, f.ex: talk213enfn23r2n3
#    this is also a check for online state
# 2) TODO credentials
#
#    then everything goes over faye and server pubishes to all users associeated with 32432jnrrf43
#    *) server generates key and listens to that channel
#       - when client publishes server publishes to all external listeners
#       - server can push to client any time
#    whats that good for
# 2) send everything to rails-app and let her handle  publishing
#    @see fax-rails if railx can reduce listeners - even if possible - it's more complex
# 3) everything over faye
  constructor: (userId, channelCallBacksList, systemCallBack) ->
    Comm._SINGLETON = this
    @_storageController = window.Comm.StorageController.instance()

    client = new Faye.Client(document.location.origin+'/comm')
    # map callbacks to channels
    Comm.channelCallBacksJSON = new Object()
    Comm.channelCallBacksJSON['system'] = { callback: systemCallBack, channel_enc_key: null }
    for pair in channelCallBacksList
      Comm.channelCallBacksJSON[pair[0].substr(1)] = { callback: pair[1], channel_enc_key: null }
    
    data = { _method: 'put',\
             user_id: userId }
    $.ajax
      type: 'POST'
      dataType: 'json'
      url: '<%= comm_register_path %>'
      data: data
    .done (msg) ->
        Comm.initSystemContext msg, Comm.channelCallBacksJSON['system']
    .fail (jqXHR, textStatus) ->
        alert('TODO: handle registration failure...')

  send: (channel, message) ->
    # 1) client wants to publish before register-ajax-response set the enc_key
    #    1.1: store request and send after register (local storage)
    # 2) the same goes for requests when client is offline
    unless Comm.channelCallBacksJSON[channel.substr(1)] == null
      channelPath = channel
      unless window.VoyageX.USE_GLOBAL_SUBSCRIBE
        channelPath += VoyageX.PEER_CHANNEL_PREFIX+Comm.channelCallBacksJSON[channel.substr(1)].channel_enc_key
      client.publish(channelPath, message)
    else
      if (Modernizr.localstorage)
        # later send: @_storageController.pop('publish')
        cacheEntry = { channel: channel, message: message }
        @_storageController.addToList('publish', 'push', cacheEntry)
      else
        alert('This Browser Doesn\'t Support Local Storage so This Message will be lost if you quit the Browser')

  @initSystemContext: (response, systemCallBack) ->
    channelPath = '/system'+VoyageX.PEER_CHANNEL_PREFIX+response.sys_channel_enc_key
    Comm.register channelPath, Comm.channelCallBacksJSON['system'].callback
    # this is done via serverside publishing to systemchannel 
    # @see ChannelsController - system:monitor
    # @see Comm.register - subscribe-callback
    # Comm.initChannelContexts response, Comm.channelCallBacksJSON

  @initChannelContexts: (initParams, channelCallBacks) ->
    for channel in Object.keys(channelCallBacks)
      if channel == 'system'
        continue
      channelCallBacks[channel].channel_enc_key = initParams.channel_enc_key
      channelPath = '/'+channel
      unless window.VoyageX.USE_GLOBAL_SUBSCRIBE 
        channelPath += VoyageX.PEER_CHANNEL_PREFIX+initParams.channel_enc_key
      # register to my own events - fails because of race-conditions
      Comm.register(channelPath, channelCallBacks[channel].callback)

  @register: (channel, callBack) ->
    # https://github.com/faye/faye/blob/master/javascript/protocol/client.js
    unless client._channels.hasSubscription(channel)
      client.subscribe channel, (message) ->
        if channel.match(/^\/system/) && message.type == 'ready_notification'
          Comm.initChannelContexts message, Comm.channelCallBacksJSON
          callBack message
        else
          callBack message
    else
      console.log('client already subscribed to channel '+channel)

  @deRegistrate: (channel) ->
    if channel == 'system'
      return
    # https://github.com/faye/faye/blob/master/javascript/protocol/client.js
    if client._channels.hasSubscription(channel)
      client.unsubscribe channel, (message) ->
        Comm.channelCallBacksJSON.system.callBack(message)
    else
      console.log('client was not subscribed to channel '+channel)

  @_instance: () ->
    @_SINGLETON
