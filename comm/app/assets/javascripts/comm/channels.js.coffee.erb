//= require comm/storage_controller

<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>
# Comm::Engine.routes.url_helpers

class window.Comm
  client = null
  channelCallBacksJSON = null
  useGlobalSubscribe = true

# 1) before faye get channel-key from app, f.ex: talk213enfn23r2n3
#    then everything goes over faye and server pubishes to all users associeated with 32432jnrrf43
#    *) server generates key and listens to that channel
#       - when client publishes server publishes to all external listeners
#       - server can push to client any time
#    whats that good for
# 2) send everything to rails-app and let her handle  publishing
#    @see fax-rails if railx can reduce listeners - even if possible - it's more complex
# 3) everything over faye
  constructor: (userId, channelCallBacksList, systemCallBack) ->
    @_storageController = new StorageController()

    client = new Faye.Client(document.location.origin+'/comm')
    channelCallBacksJSON = new Object()
    channelCallBacksJSON['system'] = { callback: systemCallBack, channel_enc_key: null }
    #this.register('/system', systemCallBack)
    for pair in channelCallBacksList
      channelCallBacksJSON[pair[0].substr(1)] = { callback: pair[1], channel_enc_key: null }
      #this.register(pair[0], pair[1])
    if useGlobalSubscribe
      Comm.initUserContext { channel_enc_key: '' }, channelCallBacksJSON
    else
      $.ajax
        type: 'POST'
        dataType: 'json'
        url: '<%= comm_register_path %>'
        data: { _method: 'put',\
                user_id: userId }
      .done (msg) ->
          Comm.initUserContext msg, channelCallBacksJSON
      .fail (jqXHR, textStatus) ->
          alert('failed')

  send: (channel, message) ->
    # 1) client wants to publish before register-ajax-response set the enc_key
    #    1.1: store request and send after register (local storage)
    # 2) the same goes for requests when client is offline
    unless channelCallBacksJSON[channel.substr(1)] == null
      channelPath = channel
      unless useGlobalSubscribe
        channelPath += VoyageX.PEER_CHANNEL_PREFIX+channelCallBacksJSON[channel.substr(1)].channel_enc_key
      client.publish(channelPath, message)
    else
      if (Modernizr.localstorage)
        # later send: @_storageController.pop('publish')
        cacheEntry = { channel: channel, message: message }
        @_storageController.addToList('publish', 'push', cacheEntry)
      else
        alert('This Browser Doesn\'t Support Local Storage so This Message will be lost if you quit the Browser')

  @initUserContext: (initParams, channelCallBacks) ->
    Object.keys(channelCallBacks).every (channel) ->
      channelCallBacks[channel].channel_enc_key = initParams.channel_enc_key
      channelPath = '/'+channel
      unless useGlobalSubscribe
        channelPath += VoyageX.PEER_CHANNEL_PREFIX+initParams.channel_enc_key
      Comm.register(channelPath, channelCallBacks[channel].callback)

  @register: (channel, callBack) ->
    # https://github.com/faye/faye/blob/master/javascript/protocol/client.js
    #unless client._channels.hasSubscription(channel)
      client.subscribe channel, (message) ->
        callBack(message)
    #else
    #  alert('client already subscribed to channel '+channel)
