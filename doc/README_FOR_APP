Use this README file to introduce your application and point to useful places in the API for learning more.
Run "rake doc:app" to generate API documentation for your models, controllers, helpers, and libraries.



Konzeption und Entwicklung einer Web-Anwendung für synchrone und asynchchrone kooperative Bearbeitung von interaktiven Karten


==========
Usecases
==========
benachrichtigungen:
falls kein poi-popup offen dann usermarker-popup - sonst grünpfeil
1: Interaktiv synchron.
+) ein user kommt in mein scan-umfeld
-> eigene view mit allen derartigen benutzern?
-> grünpfeil blinkt

online-offline angeben!

+) ein user trägt einen poi ein.
... benachrichtigung: 
unterscheidung ob in der nähe oder ganz wo anders


























==========
Concept
==========
+) tour wie bei uscan ... mehrere pois verbinden
+) a la git: der ganze baum wird als dateisystem angelegt, jedes objekt ist ne datei. alles ist ein verzueichnis, auch comment. die eigenschaften werden in einer datei geschireben - entweder eine datei für alle oder für jede eigenschaft eine datei. wenn alle attrib8ute in einem file stehen muss an erster stelle auch die version stehen, bzw. der commit-hash
+) polymorphic wie bei whatsbetter, WhatsBetter::Comparable <=> Upload (also ändern), Content als entity von Upload.
   aber: hilfsmethode file in upload: delegate!!!
+) bilder so wie werbung bei google auf map zuordnen: links liste (A,B,...), rechts karte mit Markern (uscan hat das auch)
   TODO: wie läuft das bei googlemobile bzw. youtube
+) @thesis: i18n
+) internationalisierung
+) ab bestimmten zoom medialements einblenden - ja nach kartenbewegung die liste aktualisieren. (google-maps mit bilderanzeige)
+) bilder werden bewertet - die besten werden bei kleinerem zoom angezeigt.
+) jeder client baut nen eignenen channel auf mit seiner verschlüsselten id
+) best practises
+) man sieht die bilder im umkreis von 50 km
+) der rest ist GIT commit/push - abgrenzung zur versionscontrolle. limit on history, keine branches.
   mein master mit online master.
+) aber online können auch nebenläufigkeiten bestehen.
   die bas sind alle einträge. also versionskontrolle pro eintrag, ein eintrag ist ein file. jsoon kan man aber zerschiesen+
+) Objekt-basierte Versionierung
+) rebase!!!!!
+) friends-panel neben pois-preview (photo-upload): freunde in der nähe

+) fast alles was in javascript initial geladen werden soll kommt in layouts/_init_js
  es sei denn es gibtspzialfall (peers/subscriptions)

flacher baum.


hier: objekt-semantik ist statisch - es ginbt bestimmte attribute und die ändern sich nicht.
abhängigkeiten können sequentiell serialisierbar sein

keine komma, ProtoBuffer
key value immer auf einer zeile
v1:
a{
b: null
comments[
]
}
v2:
a{
b: null
comments[
d[i=0]: null
e[i=1]: null
c[i=2]: null
]
}

v3:
a{
b: null
comments[
d[i=0]: null
e[i=1]: 
[
]
c[i=2]: null
]
}

einer löscht e, anderer bearbeitet es
i immer unveränderlch

appendonly

bei chat werden listen länger, ich kann auf einen beitrag antworten aber nicht stele aussuchen
so gesehen ist i lokal temporär,


==========
Pragmatic Diary
==========
+) form wird unsichtbar wenn sie nach openmaps eingebunden wird. $('form') !!!
die ursache kann man suchen - muss man aber auch nicht. gefahr wenn nicht: das es irgendwann mal unerwartet nicht geht.
alternativ: tests schreiben die immer alle forms suchen.

+) coffeescript
      if MediaStreamTrack.getSources is 'undefined'
      if MediaStreamTrack? && `MediaStreamTrack.getSources !== undefined`
+) # next statement removes value from inputs!!
  $("#network_state").buttonset()


==========
Devise
==========
rails generate devise:install

